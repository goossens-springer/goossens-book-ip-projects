// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.645000,HLS_SYN_LAT=43,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=212,HLS_SYN_LUT=373,HLS_VERSION=2024_2}" *)

module fir (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] x;
wire   [19:0] y;
reg    y_ap_vld;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [7:0] shift_reg_d0;
wire   [7:0] shift_reg_q0;
reg    shift_reg_ce1;
wire   [7:0] shift_reg_q1;
wire    grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_start;
wire    grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_done;
wire    grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_idle;
wire    grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_ready;
wire   [3:0] grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_address0;
wire    grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_ce0;
wire    grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_we0;
wire   [7:0] grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_d0;
wire   [3:0] grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_address1;
wire    grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_ce1;
wire    grp_fir_Pipeline_MAC_LOOP_fu_76_ap_start;
wire    grp_fir_Pipeline_MAC_LOOP_fu_76_ap_done;
wire    grp_fir_Pipeline_MAC_LOOP_fu_76_ap_idle;
wire    grp_fir_Pipeline_MAC_LOOP_fu_76_ap_ready;
wire   [16:0] grp_fir_Pipeline_MAC_LOOP_fu_76_acc_out;
wire    grp_fir_Pipeline_MAC_LOOP_fu_76_acc_out_ap_vld;
wire   [3:0] grp_fir_Pipeline_MAC_LOOP_fu_76_shift_reg_address0;
wire    grp_fir_Pipeline_MAC_LOOP_fu_76_shift_reg_ce0;
reg    grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    shift_reg_we0_out;
reg    grp_fir_Pipeline_MAC_LOOP_fu_76_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state3;
reg    shift_reg_we0_local;
reg    shift_reg_ce0_local;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_start_reg = 1'b0;
#0 grp_fir_Pipeline_MAC_LOOP_fu_76_ap_start_reg = 1'b0;
end

fir_shift_reg_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0),
    .address1(grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_address1),
    .ce1(shift_reg_ce1),
    .q1(shift_reg_q1)
);

fir_fir_Pipeline_SHIFT_LOOP grp_fir_Pipeline_SHIFT_LOOP_fu_70(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_start),
    .ap_done(grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_done),
    .ap_idle(grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_idle),
    .ap_ready(grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_ready),
    .shift_reg_address0(grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_address0),
    .shift_reg_ce0(grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_ce0),
    .shift_reg_we0(grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_we0),
    .shift_reg_d0(grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_d0),
    .shift_reg_address1(grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_address1),
    .shift_reg_ce1(grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_ce1),
    .shift_reg_q1(shift_reg_q1)
);

fir_fir_Pipeline_MAC_LOOP grp_fir_Pipeline_MAC_LOOP_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fir_Pipeline_MAC_LOOP_fu_76_ap_start),
    .ap_done(grp_fir_Pipeline_MAC_LOOP_fu_76_ap_done),
    .ap_idle(grp_fir_Pipeline_MAC_LOOP_fu_76_ap_idle),
    .ap_ready(grp_fir_Pipeline_MAC_LOOP_fu_76_ap_ready),
    .acc_out(grp_fir_Pipeline_MAC_LOOP_fu_76_acc_out),
    .acc_out_ap_vld(grp_fir_Pipeline_MAC_LOOP_fu_76_acc_out_ap_vld),
    .shift_reg_address0(grp_fir_Pipeline_MAC_LOOP_fu_76_shift_reg_address0),
    .shift_reg_ce0(grp_fir_Pipeline_MAC_LOOP_fu_76_shift_reg_ce0),
    .shift_reg_q0(shift_reg_q0)
);

fir_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .y(y),
    .y_ap_vld(y_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fir_Pipeline_MAC_LOOP_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_fir_Pipeline_MAC_LOOP_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_fir_Pipeline_MAC_LOOP_fu_76_ap_ready == 1'b1)) begin
            grp_fir_Pipeline_MAC_LOOP_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_start_reg <= 1'b1;
        end else if ((grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_ready == 1'b1)) begin
            grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_fir_Pipeline_MAC_LOOP_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address0 = grp_fir_Pipeline_MAC_LOOP_fu_76_shift_reg_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_address0 = grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_address0;
    end else begin
        shift_reg_address0 = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_ce0 = grp_fir_Pipeline_MAC_LOOP_fu_76_shift_reg_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_ce0 = grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_ce0;
    end else begin
        shift_reg_ce0 = shift_reg_ce0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_ce0_local = 1'b1;
    end else begin
        shift_reg_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_ce1 = grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_ce1;
    end else begin
        shift_reg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_d0 = grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_d0;
    end else begin
        shift_reg_d0 = x;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_we0 = grp_fir_Pipeline_SHIFT_LOOP_fu_70_shift_reg_we0;
    end else begin
        shift_reg_we0 = (shift_reg_we0_out | 1'b0);
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_we0_local = 1'b1;
    end else begin
        shift_reg_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_fir_Pipeline_MAC_LOOP_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fir_Pipeline_MAC_LOOP_fu_76_ap_start = grp_fir_Pipeline_MAC_LOOP_fu_76_ap_start_reg;

assign grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_start = grp_fir_Pipeline_SHIFT_LOOP_fu_70_ap_start_reg;

assign shift_reg_we0_out = shift_reg_we0_local;

assign y = $signed(grp_fir_Pipeline_MAC_LOOP_fu_76_acc_out);

endmodule //fir
